;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname lab-08-client) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ())))
;; 
;; The client side of the twt application.
;;
;; An editor supports editing twts, pressing return sends them to server.
;; Last 10 twts are displayed.
;;
;;

(require 2htdp/image)
(require 2htdp/universe)

;; Constants

(define WIDTH  400)
(define HEIGHT 800)

(define TEXT-SIZE  14)
(define TEXT-COLOR "BLACK")

(define CURSOR (text "|" 20 "red"))

(define TEXT-X 10)
(define TEXT-Y 10)

(define BLANK (square 0 "solid" "white"))

(define BACKGROUND (empty-scene WIDTH HEIGHT))

(define TEXTBOX (rectangle (- WIDTH 20) (* TEXT-SIZE 2) "outline" "black"))


;; -------------------------------------------------------------------
;; -------------------------------------------------------------------
;; Data Definitions

(define-struct es (txt cp))
;; EditorState (es) is (make-es String Natural)
;; interp. the current text and cursor position within that text of an editor

(define ES1 (make-es ""      0)) ; empty
(define ES2 (make-es "bbbaa" 3)) ; cursor in midst of text
(define ES3 (make-es "aa"    0)) ; cursor at beginning
(define ES4 (make-es "bb"    2)) ; cursor at end


;; Message is one of:
;; - (list "twt" STRING)         ;Client to Server   a new twt
;; - (list "lot" ListOfString)   ;Server to Client   list of 10 recent twts


(define-struct cs (uname lot es))
;; ClientState is (make-cs String ListOfString EditorState)
;; interp. the username and the most recent list of twts received from the server
(define CS1 (make-cs "Luna" (list "1") ES1))
(define CS2 (make-cs "Ginny" (list "3" "2" "1") ES2))



;; -------------------------------------------------------------------
;; -------------------------------------------------------------------
;; Functions:


;; String String -> ClientState
;; The main function for the simple counter client.
;; Starts the client, connecting it to server at server-name.
;; Start the client with something like:
;;   (client "Tom" "LOCALHOST")      if server is running on same machine
;;   (client "Tim" "dog.cat.ubc.ca") if running on another machine
;;
;;   (launch-many-worlds (client "Tom" "LOCALHOST")  to get more than one client
;;                       (client "Tim" "LOCALHOST")) running on local machine
;;
(define (client uname server-name)
  (big-bang (make-cs uname empty ES1)
            (register   server-name)
            (to-draw    render-cs)
            (on-receive handle-msg)
            (on-key     handle-key)))




;; -------------------------------------------------------------------
;; ClientState -> Image
;; place the rendering of client-lot at TEXT-X TEXT-Y

(check-expect (render-cs (make-cs "Tim" (list "2" "1") ES1))
              (place-image/align (above/align "left"
                                              (overlay/align "left" "middle" (es-to-image ES1) TEXTBOX)
                                              (lot-to-image (list "2" "1")))
                                 TEXT-X TEXT-Y
                                 "left" "top" 
                                 BACKGROUND))

(define (render-cs cs)
  (place-image/align (above/align "left"
                                  (overlay/align "left" "middle" (es-to-image (cs-es cs)) TEXTBOX)
                                  (lot-to-image (cs-lot cs)))
                     TEXT-X TEXT-Y
                     "left" "top" 
                     BACKGROUND)) 

;; ListOfString -> Image
;; render the twts one above the other
(check-expect (lot-to-image empty) BLANK)
(check-expect (lot-to-image (list "2" "1"))
              (above/align "left"
                           (txt-to-image "2")
                           (above/align "left"
                                        (txt-to-image "1")
                                        BLANK)))

(define (lot-to-image lot)
  (cond [(empty? lot) BLANK]
        [else
         (above/align "left" 
                      (txt-to-image (first lot))
                      (lot-to-image (rest lot)))]))

;; EditorState -> Image
;; place text with cursor at left, middle edge of MTS
(check-expect (render-es (make-es "abc" 1))
              (place-image/align (es-to-image (make-es "abc" 1)) 
                                 TEXT-X TEXT-Y 
                                 "left" "middle"
                                 BACKGROUND))

(define (render-es es)
  (place-image/align (es-to-image es) 
                     TEXT-X TEXT-Y 
                     "left" "middle" 
                     BACKGROUND))


;; EditorState -> Image
;; produce image of es with CURSOR at appropriate place
(check-expect (es-to-image (make-es "" 0)) CURSOR)
(check-expect (es-to-image (make-es "abc" 2))
              (beside (txt-to-image "ab")
                      CURSOR
                      (txt-to-image "c")))


(define (es-to-image es)
  (beside (text (txt-before-cp es) TEXT-SIZE TEXT-COLOR)
          CURSOR
          (text (txt-after-cp es) TEXT-SIZE TEXT-COLOR)))


;; String -> Image
;; convert a string to an image of the appropriate size and color
(check-expect (txt-to-image "a") (text "a" TEXT-SIZE TEXT-COLOR))

(define (txt-to-image str)
  (text str TEXT-SIZE TEXT-COLOR))



;; -------------------------------------------------------------------

;; ClientState Message -> ClientState
;; Update client state to new list of twts
(check-expect (handle-msg (make-cs "Tim" (list "1") ES1) (list "lot" (list "2" "1")))
              (make-cs "Tim" (list "2" "1") ES1))

(define (handle-msg cs msg)
  (cond [(string=? "lot" (first msg))
         (make-cs (cs-uname cs) (second msg) (cs-es cs))]))



;; -------------------------------------------------------------------

;; ClientState KeyEvent -> ClientState or Package
;; when space is pressed, send a twt of the next natural number
;; otherwise cs doesn't change
;; NOTE, we wait for message back from server to update cs-lot

(check-expect (handle-key (make-cs "Joseph" (list "a") (make-es "ab" 1)) "shift")      
              (make-cs "Joseph" (list "a") (make-es "ab" 1)))

(check-expect (handle-key (make-cs "Joseph" (list "a") (make-es "ab" 1)) "left")  
              (make-cs "Joseph" (list "a") (make-es "ab" 0)))

(check-expect (handle-key (make-cs "Joseph" (list "a") (make-es "ab" 1)) "right")      
              (make-cs "Joseph" (list "a") (make-es "ab" 2)))

(check-expect (handle-key (make-cs "Joseph" (list "a") (make-es "ab" 1)) "\b")      
              (make-cs "Joseph" (list "a") (make-es "b" 0)))

(check-expect (handle-key (make-cs "Joseph" (list "a") (make-es "ab" 1)) "b")      
              (make-cs "Joseph" (list "a") (make-es "abb" 2)))

(check-expect (handle-key (make-cs "Joseph" (list "a") (make-es "ab" 1)) "\r")
              (make-package (make-cs "Joseph" (list "a") (make-es "" 0)) (list "twt" "Joseph:ab"))) 


(define (handle-key cs key)
  (cond [(key=? key "\b")          (make-cs (cs-uname cs) (cs-lot cs) (backspace (cs-es cs)))]
        [(key=? key "\r")          (make-package (make-cs (cs-uname cs) (cs-lot cs) (make-es "" 0)) 
                                                 (list "twt" (string-append (cs-uname cs) ":" (es-txt (cs-es cs)))))] 
        [(key=? key "left")        (make-cs (cs-uname cs) (cs-lot cs) (cursor-left (cs-es cs)))]
        [(key=? key "right")       (make-cs (cs-uname cs) (cs-lot cs) (cursor-right (cs-es cs)))]        
        [(= (string-length key) 1) (make-cs (cs-uname cs) (cs-lot cs) (insert (cs-es cs) key))]
        
        [else cs]))

;; -------------------------------------------------------------------


;; EditorState String -> EditorState
;; Insert the 1 character string before the cursor position
(check-expect (insert  (make-es ""   0) "a") (make-es "a"   1))
(check-expect (insert  (make-es "12" 0) "a") (make-es "a12" 1))
(check-expect (insert  (make-es "12" 1) "a") (make-es "1a2" 2))
(check-expect (insert  (make-es "12" 2) "a") (make-es "12a" 3))

(define (insert es ch)
  (make-es (string-append (txt-before-cp es) ch (txt-after-cp es))
           (add1 (es-cp es))))


;; EditorState -> EditorState
;; moves the cursor left/right by 1
(check-expect (cursor-left  (make-es "ab" 0)) (make-es "ab" 0))
(check-expect (cursor-left  (make-es "ab" 1)) (make-es "ab" 0))
(check-expect (cursor-right (make-es "ab" 1)) (make-es "ab" 2))
(check-expect (cursor-right (make-es "ab" 2)) (make-es "ab" 2))

(define (cursor-left es)
  (make-es (es-txt es) 
           (max 0 (sub1 (es-cp es)))))

(define (cursor-right es)
  (make-es (es-txt es)
           (min (string-length (es-txt es)) (add1 (es-cp es)))))



;; EditorState  -> EditorState
;; Delete 1 character before the cursor position
(check-expect (backspace  (make-es "12" 1)) (make-es "2" 0))
(check-expect (backspace  (make-es "12" 2)) (make-es "1" 1))
(check-expect (backspace  (make-es "12" 0)) (make-es "12" 0))

(define (backspace es)
  (if (> (es-cp es) 0)
      (make-es (string-append (substring (es-txt es) 0 (sub1 (es-cp es)))
                              (txt-after-cp es))
               (sub1 (es-cp es)))
      es))



;; EditorState -> String
;; produce the text before the cursor position
(check-expect (txt-before-cp (make-es ""    0)) "")
(check-expect (txt-before-cp (make-es "abc" 0)) "")
(check-expect (txt-before-cp (make-es "abc" 1)) "a")
(check-expect (txt-before-cp (make-es "abc" 3)) "abc")

(define (txt-before-cp es)
  (substring (es-txt es) 0 (es-cp es)))


;; EditorState -> String
;; produce the text after the cursor position
(check-expect (txt-after-cp (make-es ""    0)) "")
(check-expect (txt-after-cp (make-es "abc" 3)) "")
(check-expect (txt-after-cp (make-es "abc" 2)) "c")
(check-expect (txt-after-cp (make-es "abc" 0)) "abc")

(define (txt-after-cp es)
  (substring (es-txt es) (es-cp es)))





;; -------------------------------------------------------------------
;; -------------------------------------------------------------------

(launch-many-worlds (client "Norman" "kunghit.ugrad.cs.ubc.ca"))
                    
